
#引入生产或者开发的单独配置
spring.profiles.active=prod

###server 
#正式端口
server.port=8911
server.undertow.io-threads=4
server.undertow.worker-threads=100
server.undertow.buffer-size=1024
server.undertow.buffers-per-region=22
server.undertow.direct-buffers=true
###datasource 
#由于为只读数据库 所以生产和开发环境都访问正式库
spring.datasource.driver-class-name=net.sourceforge.jtds.jdbc.Driver
spring.datasource.url=jdbc:jtds:sqlserver://dbs02.1433.jrjc.local;DatabaseName=BJ_JRJCMS
spring.datasource.username=JRJ_MPSite_ReadOnly
spring.datasource.password=OtW18uNZQuUXoQi6Se0S
#druid数据库连接池配置
spring.datasource.type = com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize = 5 
spring.datasource.minIdle = 10
spring.datasource.maxActive = 100
#配置获取连接等待超时的时间
spring.datasource.maxWait = 60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis = 60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis = 300000
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters = stat
#是否缓存preparedStatement，也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements = true
#指定连接池的缓存大小
spring.datasource.maxOpenPreparedStatements = 20
#用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.validationQuery = SELECT 1 
spring.datasource.testWhileIdle = true
spring.datasource.testOnBorrow = false
spring.datasource.testOnReturn = false
###Redis
spring.redis.database=0
spring.redis.pool.max-active=100
spring.redis.pool.max-idle=30
spring.redis.pool.min-idle=10
spring.redis.pool.max-wait=-1
spring.redis.timeout=5000
###Encoding 
spring.http.encoding.force=true
spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
###Log  
logging.file=/data/logs/m2018-pay/pay_logs.log
logging.level.org.springframework.web=DEBUG
logging.level.com.jrj.jd.controller=DEBUG
#httpclient
# 链接池的最大链接数
http.maxTotal = 1000
# 每个路由的默认最大连接数 所有的路由加起来等于maxTotal
http.defaultMaxPerRoute = 500
# 三次握手链接的时间(创建连接的最长时间)
http.connectTimeout=10000
#  从连接池中获取到连接的最长时间
http.connectionRequestTimeout=10000
# 数据传输过程的最大间隔时间
http.socketTimeout=20000
# 提交请求前测试连接是否可用
http.staleConnectionCheckEnabled=true

